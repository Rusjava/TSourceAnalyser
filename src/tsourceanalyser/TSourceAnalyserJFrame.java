/*
 * Analyses the Shvedunov electron data
 */
package tsourceanalyser;

import ElectronBunchRead.ElectronBunchRead;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.EOFException;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;
import javax.swing.JOptionPane;
import java.text.DecimalFormat;
import java.util.Locale;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.border.TitledBorder;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Formatter;
import javax.swing.JFileChooser;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.DomainOrder;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DatasetGroup;
import org.jfree.data.xy.XYDataset;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;

import shadowfileconverter.MyTextUtilities;

/**
 *
 * @author Ruslan Feshchenko
 * @version 1.0
 */
public class TSourceAnalyserJFrame extends javax.swing.JFrame {

    private int columnChoice = 0;
    private boolean working = false;
    private int nel;
    private String[] labelUnits;
    private String[] keys;
    private int size = 200;
    private double[] minX, maxX;
    private ChartParam[] chartParam;
    private JFreeChart[] charts;
    private ChartPanel chartPanel = null;
    private double mult = 1.6;
    private final int N_LINES = 3;
    private String[] paramDefaults;
    private JMenuItem saveDataItem;

    /**
     * Creates new form TSourceAnalyserJFrame
     */
    public TSourceAnalyserJFrame() {
        initComponents();
        this.paramDefaults = new String[]{"0.04", "3", "0.04", "3", "8", "500"};
        this.minX = new double[]{-0.04, -3, -0.04, -3, -8, -500};
        this.maxX = new double[]{0.04, 3, 0.04, 3, 8, 500};
        this.labelUnits = new String[]{"mm", "mrad", "mm", "mrad",
            "mm", "kev"};
        this.keys = new String[]{"x-size", "thetax", "y-size", "thetay", "length", "energy"};
        this.chartParam = new ChartParam[ElectronBunchRead.NCOL];
        this.charts = new JFreeChart[ElectronBunchRead.NCOL];
        this.saveDataItem = new JMenuItem("Save data...");
        this.saveDataItem.setMnemonic(KeyEvent.VK_S);
        this.saveDataItem.addActionListener((evt) -> jSaveDataItemactionPerformed(evt));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabelMean = new javax.swing.JLabel();
        jLabelMeanMDeviation = new javax.swing.JLabel();
        jLabelElectronCount = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuOptions = new javax.swing.JMenu();
        jMenuItemSize = new javax.swing.JMenuItem();
        jMenuItemRanges = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItemAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Inputs", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel1.setPreferredSize(new java.awt.Dimension(218, 100));

        jButton1.setText("Open file");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Column 1", "Column 2", "Column 3", "Column 4", "Column 5", "Column 6" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED), "Plot", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 214, Short.MAX_VALUE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Results:", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel3.setPreferredSize(new java.awt.Dimension(382, 100));

        jLabelMean.setText("Mean:");

        jLabelMeanMDeviation.setText("Mean  deviation:");

        jLabelElectronCount.setText("Number of loaded electrons:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabelElectronCount, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabelMean, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelMeanMDeviation, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelMean)
                    .addComponent(jLabelMeanMDeviation))
                .addGap(18, 18, 18)
                .addComponent(jLabelElectronCount)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "   "));
        jPanel4.setPreferredSize(new java.awt.Dimension(12, 100));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 78, Short.MAX_VALUE)
        );

        jMenuOptions.setText("Options");

        jMenuItemSize.setText("Graph size...");
        jMenuItemSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSizeActionPerformed(evt);
            }
        });
        jMenuOptions.add(jMenuItemSize);

        jMenuItemRanges.setText("Graph ranges...");
        jMenuItemRanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRangesActionPerformed(evt);
            }
        });
        jMenuOptions.add(jMenuItemRanges);

        jMenuBar1.add(jMenuOptions);

        jMenuHelp.setText("Help");
        jMenuHelp.setToolTipText("");

        jMenuItemAbout.setText("About");
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAboutActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemAbout);

        jMenuBar1.add(jMenuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        double[] electron = new double[ElectronBunchRead.NCOL];
        for (int i = 0; i < ElectronBunchRead.NCOL; i++) {
            chartParam[i]
                    = new ChartParam(keys[i], (maxX[i] - minX[i]) / (size - 1), size, minX[i]);
        }
        try (ElectronBunchRead electronBunchRead = new ElectronBunchRead()) {
            do {
                electronBunchRead.read(electron);
                nel = electronBunchRead.getElectronCounter();
                jLabelElectronCount.setText("Number of loaded electrons: " + nel);
                for (int i = 0; i < ElectronBunchRead.NCOL; i++) {
                    chartParam[i].add(electron[i]);
                }
            } while (true);
        } catch (EOFException e) {
            for (int i = 0; i < ElectronBunchRead.NCOL; i++) {
                charts[i] = createLineChart(createLineDataset(chartParam[i]), keys[i] + ", " + labelUnits[i], "a.u.");
            }
            updateLabels();
            updateChartPanel();
        } catch (InputMismatchException ex) {
            JOptionPane.showMessageDialog(null, "Not a real number!", "Error",
                    JOptionPane.ERROR_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "I/O error during file reading!", "Error",
                    JOptionPane.ERROR_MESSAGE);
        } catch (InterruptedException ex) {

        } catch (InvocationTargetException ex) {

        } catch (NoSuchElementException ex) {
            JOptionPane.showMessageDialog(null, "The data have less than six columns!", "Error",
                    JOptionPane.ERROR_MESSAGE);
        } catch (ElectronBunchRead.FileNotOpenedException ex) {

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        String selectedItem = (String) jComboBox1.getSelectedItem();
        columnChoice = Integer.parseInt(selectedItem.substring(selectedItem.length() - 1)) - 1;
        updateLabels();
        updateChartPanel();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jMenuItemSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSizeActionPerformed
        // TODO add your handling code here:
        JTextField sizeBox = new JTextField();
        sizeBox.setText("200");
        Object[] message = {
            "Enter graph size in points:", sizeBox
        };
        int option = JOptionPane.showConfirmDialog(null, message, "Graph size",
                JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            size = (int) Math.round(MyTextUtilities.TestValue(1, 1000, sizeBox, "200"));
        }
    }//GEN-LAST:event_jMenuItemSizeActionPerformed

    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null,
                "<html>Electron bunch analyser. <br>Version: 1.0 <br>Date: March 2015. <br>Author: Ruslan Feshchenko</html>",
                "About TSourceAnalyser", 1);
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    private void jMenuItemRangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRangesActionPerformed
        // TODO add your handling code here:
        class Choice1 {

            public int choice;

            public Choice1(int choice) {
                this.choice = choice;
            }
        }
        Choice1 choice = new Choice1(columnChoice);
        JComboBox jComboBoxOption = new JComboBox();
        jComboBoxOption.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Column 1", "Column 2", "Column 3", "Column 4",
            "Column 5", "Column 6"}));
        JTextField minValueBox = new JTextField("-" + paramDefaults[choice.choice]);
        JLabel labelMin = new JLabel("Enter min value of "
                + keys[choice.choice] + " in " + labelUnits[choice.choice]);
        JLabel labelMax = new JLabel("Enter max value of "
                + keys[choice.choice] + " in " + labelUnits[choice.choice]);
        JTextField maxValueBox = new JTextField(paramDefaults[choice.choice]);
        jComboBoxOption.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                String selectedItem = (String) jComboBoxOption.getSelectedItem();
                choice.choice = Integer.parseInt(selectedItem.substring(selectedItem.length() - 1)) - 1;
                minValueBox.setText("-" + paramDefaults[choice.choice]);
                maxValueBox.setText(paramDefaults[choice.choice]);
                labelMin.setText("Enter min value of "
                        + keys[choice.choice] + " in " + labelUnits[choice.choice]);
                labelMax.setText("Enter max value of "
                        + keys[choice.choice] + " in " + labelUnits[choice.choice]);
            }
        });
        Object[] message = {
            "Choose column", jComboBoxOption,
            labelMin, minValueBox,
            labelMax, maxValueBox
        };
        int option = JOptionPane.showConfirmDialog(null, message, "Graph options",
                JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            minX[choice.choice] = MyTextUtilities.TestValue(-10 * Double.parseDouble(paramDefaults[choice.choice]),
                    0, minValueBox, "-" + paramDefaults[choice.choice]);
            maxX[choice.choice] = MyTextUtilities.TestValue(0,
                    10 * Double.parseDouble(paramDefaults[choice.choice]), maxValueBox, paramDefaults[choice.choice]);
        }
    }//GEN-LAST:event_jMenuItemRangesActionPerformed

    /*
     * Acttion event handler for saveData item of the popup menu of the chart panel
     * It saves graph data into a text file
     */
    private void jSaveDataItemactionPerformed(java.awt.event.ActionEvent evt) {
        XYDataset dataset = chartPanel.getChart().getXYPlot().getDataset();
        JFileChooser fo = new JFileChooser();
        fo.setDialogTitle("Chhoise file to save graphs");
        if (fo.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            File file = fo.getSelectedFile();
            if (file.exists()) {
                int n = JOptionPane.showConfirmDialog(null, "The file already exists. Overwrite?", "Warning",
                        JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (n == JOptionPane.NO_OPTION) {
                    return;
                }
            }
            Formatter fm;
            try (PrintWriter pw = new PrintWriter(new FileWriter(file, false))) {
                for (int i = 0; i < dataset.getItemCount(0); i++) {
                    fm = new Formatter();
                    fm.format("%f", dataset.getXValue(0, i));
                    for (int k = 0; k < N_LINES; k++) {
                        fm.format(" %f", dataset.getYValue(k, i));
                    }
                    pw.println(fm);
                }
                pw.close();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error while writing to the file", "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /*
     * Generates line charts
     */
    private JFreeChart createLineChart(XYDataset dataset, String xlabel, String ylabel) {
        /* X axis */
        NumberAxis xAxis = new NumberAxis(xlabel);
        xAxis.setStandardTickUnits(NumberAxis.createStandardTickUnits());
        xAxis.setLowerMargin(0.0);
        xAxis.setUpperMargin(0.0);
        xAxis.setAutoRangeIncludesZero(false);
        /* Y axis */
        NumberAxis yAxis = new NumberAxis(ylabel);
        yAxis.setStandardTickUnits(NumberAxis.createStandardTickUnits());
        yAxis.setLowerMargin(0.0);
        yAxis.setUpperMargin(0.0);
        yAxis.setAutoRangeIncludesZero(false);
        /* Renderer */
        XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        for (int i = 0; i < N_LINES; i++) {
            renderer.setSeriesLinesVisible(i, true);
            renderer.setSeriesShapesVisible(i, false);
            renderer.setSeriesStroke(i, new BasicStroke(2.0f));
        }
        renderer.setSeriesPaint(0, Color.BLUE);
        renderer.setSeriesPaint(1, Color.GREEN);
        renderer.setSeriesPaint(2, Color.MAGENTA);
        /* Plot creation */
        XYPlot plot = new XYPlot(dataset, xAxis, yAxis, renderer);
        plot.setBackgroundPaint(Color.white);
        plot.setRangeGridlinePaint(Color.black);
        plot.setDomainGridlinePaint(Color.black);
        /* Chart creation */
        JFreeChart chart = new JFreeChart(plot);
        chart.removeLegend();
        chart.setBackgroundPaint(Color.white);
        return chart;
    }

    /*
     * Generates XY datasets for charts
     */
    private XYDataset createLineDataset(final ChartParam data) {
        return new XYDataset() {
            public int getSeriesCount() {
                return N_LINES;
            }

            public int getItemCount(int series) {
                return data.size;
            }

            public Number getY(int series, int item) {
                return new Double(getYValue(series, item));
            }

            public double getXValue(int series, int item) {
                return item * data.step + data.offset;
            }

            public Number getX(int series, int item) {
                return new Double(getXValue(series, item));
            }

            public double getYValue(int series, int item) {
                double dev = mult * data.getMeanDeviation();
                switch (series) {
                    case 0:
                        return data.getData()[item];
                    case 1:
                        return nel * data.step / Math.sqrt(2 * Math.PI) / data.getMeanDeviation()
                                * Math.exp(-Math.pow((item * data.step + data.offset - data.getMeanValue()) / data.getMeanDeviation(), 2) / 2);
                    case 2:
                        return nel * data.step / Math.sqrt(2 * Math.PI) / dev
                                * Math.exp(-Math.pow((item * data.step + data.offset - data.getMeanValue()) / dev, 2) / 2);
                }
                return 0;
            }

            public void addChangeListener(DatasetChangeListener listener) {
                // ignore - this dataset never changes
            }

            public void removeChangeListener(DatasetChangeListener listener) {
                // ignore
            }

            public DatasetGroup getGroup() {
                return null;
            }

            public void setGroup(DatasetGroup group) {
                // ignore
            }

            public Comparable getSeriesKey(int series) {
                return data.key + series;
            }

            public int indexOf(Comparable seriesKey) {
                String key = (String) seriesKey;
                return Integer.parseInt(key.substring(key.length() - 1));
            }

            public DomainOrder getDomainOrder() {
                return DomainOrder.ASCENDING;
            }
        };
    }

    /*
     * updates labels with mean values
     */
    private void updateLabels() {
        if (chartParam[0] != null) {
            jLabelMean.setText("Mean: "
                    + (new DecimalFormat("#.######")).format(chartParam[columnChoice].getMeanValue())
                    + " " + labelUnits[columnChoice]);
            jLabelMeanMDeviation.setText("Mean deviation: "
                    + (new DecimalFormat("#.######")).format(chartParam[columnChoice].getMeanDeviation())
                    + " " + labelUnits[columnChoice]);
            ((TitledBorder) (jPanel3.getBorder())).setTitle("Results: " + keys[columnChoice]);
            jPanel3.revalidate();
            jPanel3.repaint();
        }
    }

    /*
     * Updates the main Chart Panel
     */
    private void updateChartPanel() {
        if (chartPanel != null) {
            jPanel2.removeAll();
        }
        chartPanel = new ChartPanel(charts[columnChoice], (int) (0.9 * jPanel2.getWidth()), (int) (0.9 * jPanel2.getHeight()),
                0, 0, 10 * jPanel2.getWidth(), 10 * jPanel2.getHeight(), false, true,
                true, true, true, true);
        chartPanel.getPopupMenu().add(saveDataItem);
        jPanel2.setLayout(new BorderLayout(10, 10));
        jPanel2.add(chartPanel, BorderLayout.CENTER);
        jPanel2.revalidate();
        jPanel2.repaint();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TSourceAnalyserJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TSourceAnalyserJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TSourceAnalyserJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TSourceAnalyserJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        Locale.setDefault(new Locale("en", "US"));
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TSourceAnalyserJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabelElectronCount;
    private javax.swing.JLabel jLabelMean;
    private javax.swing.JLabel jLabelMeanMDeviation;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemRanges;
    private javax.swing.JMenuItem jMenuItemSize;
    private javax.swing.JMenu jMenuOptions;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables
}
